/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Classes.Enrollment;
import Classes.Student;
import Classes.Subject;
import Utilities.PopulateTable;
import Utilities.StudentIDFilter;
import Utilities.StudentIDListener;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import org.bson.Document;

/**
 *
 * @author Delmoro-Ke
 */
public class EncodingPane extends javax.swing.JPanel {

    /**
     * Creates new form EnrollmentPane
     */
    public EncodingPane() {
        initComponents();
        ((AbstractDocument) txtStudentId.getDocument()).setDocumentFilter(new StudentIDFilter());
        txtStudentId.getDocument().addDocumentListener(new StudentIDListener(comboStudentName));

        populateComboStudentName();
        populateComboSubjectCode();
        populateComboSubjectDesc();
    }

    private void insertEnrollment() {
        if (txtStudentId.getText().isBlank() || comboStudentName.getSelectedItem() == null || comboSubjectCode.getSelectedItem() == null || comboSubjectDesc.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Missing info!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");
            MongoCollection<Document> collection = db.getCollection("Enrollment");

            Document query = new Document("StudentID", Integer.parseInt(txtStudentId.getText()))
                    .append("SubjectCode", comboSubjectCode.getSelectedItem().toString());
            
            if (collection.find(query).first() != null) {
                JOptionPane.showMessageDialog(null, "Enrollment already exists for this student in this course!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } 

            Enrollment enrollment = new Enrollment(
                    Integer.parseInt(txtStudentId.getText().trim()),
                    comboSubjectCode.getSelectedItem().toString(),
                    Double.parseDouble(comboGrade.getSelectedItem().toString())
            );

            collection.insertOne(enrollment.toDocument());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateComboStudentName() {
        Object curr = comboStudentName.getSelectedItem();
        comboStudentName.removeAllItems();
        comboStudentName.addItem(null);

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            ArrayList<String> names = Student.getStudentNames(db);
            for (String name : names) {
                comboStudentName.addItem(name);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        comboStudentName.setSelectedItem(curr);
    }

    private void populateComboSubjectCode() {
        Object curr = comboSubjectCode.getSelectedItem();
        comboSubjectCode.removeAllItems();
        comboSubjectCode.addItem(null);

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            ArrayList<String> codes = Subject.getSubjectCodes(db);
            for (String code : codes) {
                comboSubjectCode.addItem(code);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        comboSubjectCode.setSelectedItem(curr);
    }

    private void populateComboSubjectDesc() {
        Object curr = comboSubjectDesc.getSelectedItem();
        comboSubjectDesc.removeAllItems();
        comboSubjectDesc.addItem(null);

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            ArrayList<String> descs = Subject.getSubjectDescs(db);
            for (String desc : descs) {
                comboSubjectDesc.addItem(desc);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        comboSubjectDesc.setSelectedItem(curr);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInputs = new javax.swing.JPanel();
        panelStudentID = new javax.swing.JPanel();
        lblStudentID = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        panelStudentName = new javax.swing.JPanel();
        lblStudentName = new javax.swing.JLabel();
        comboStudentName = new javax.swing.JComboBox<>();
        separator = new javax.swing.JSeparator();
        panelSubjectCode = new javax.swing.JPanel();
        lblSubjectCode = new javax.swing.JLabel();
        comboSubjectCode = new javax.swing.JComboBox<>();
        panelSubjectDescription = new javax.swing.JPanel();
        lblSubjectDescription = new javax.swing.JLabel();
        comboSubjectDesc = new javax.swing.JComboBox<>();
        panelGrade = new javax.swing.JPanel();
        lblGrade = new javax.swing.JLabel();
        comboGrade = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        scrollGrades = new javax.swing.JScrollPane();
        tableGrades = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        panelInputs.setAlignmentX(0.0F);
        panelInputs.setAlignmentY(0.0F);
        panelInputs.setMaximumSize(new java.awt.Dimension(32767, 200));
        panelInputs.setMinimumSize(new java.awt.Dimension(365, 205));
        panelInputs.setName(""); // NOI18N
        panelInputs.setOpaque(false);
        panelInputs.setPreferredSize(new java.awt.Dimension(370, 200));
        panelInputs.setLayout(new javax.swing.BoxLayout(panelInputs, javax.swing.BoxLayout.Y_AXIS));

        panelStudentID.setOpaque(false);

        lblStudentID.setText("Student ID");
        lblStudentID.setMaximumSize(new java.awt.Dimension(110, 25));
        lblStudentID.setMinimumSize(new java.awt.Dimension(110, 25));
        lblStudentID.setPreferredSize(new java.awt.Dimension(110, 25));
        panelStudentID.add(lblStudentID);

        txtStudentId.setMaximumSize(new java.awt.Dimension(250, 30));
        txtStudentId.setMinimumSize(new java.awt.Dimension(250, 30));
        txtStudentId.setPreferredSize(new java.awt.Dimension(250, 30));
        panelStudentID.add(txtStudentId);

        panelInputs.add(panelStudentID);

        panelStudentName.setOpaque(false);

        lblStudentName.setText("Student name");
        lblStudentName.setMaximumSize(new java.awt.Dimension(110, 25));
        lblStudentName.setMinimumSize(new java.awt.Dimension(110, 25));
        lblStudentName.setPreferredSize(new java.awt.Dimension(110, 25));
        panelStudentName.add(lblStudentName);

        comboStudentName.setMaximumSize(new java.awt.Dimension(250, 30));
        comboStudentName.setMinimumSize(new java.awt.Dimension(250, 30));
        comboStudentName.setName(""); // NOI18N
        comboStudentName.setPreferredSize(new java.awt.Dimension(250, 30));
        comboStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStudentNameActionPerformed(evt);
            }
        });
        panelStudentName.add(comboStudentName);

        panelInputs.add(panelStudentName);

        separator.setForeground(new java.awt.Color(255, 255, 255));
        separator.setMaximumSize(new java.awt.Dimension(365, 5));
        separator.setMinimumSize(new java.awt.Dimension(365, 5));
        separator.setPreferredSize(new java.awt.Dimension(365, 5));
        panelInputs.add(separator);

        panelSubjectCode.setOpaque(false);

        lblSubjectCode.setText("Subject code");
        lblSubjectCode.setMaximumSize(new java.awt.Dimension(110, 25));
        lblSubjectCode.setMinimumSize(new java.awt.Dimension(110, 25));
        lblSubjectCode.setPreferredSize(new java.awt.Dimension(110, 25));
        panelSubjectCode.add(lblSubjectCode);

        comboSubjectCode.setMaximumSize(new java.awt.Dimension(250, 30));
        comboSubjectCode.setMinimumSize(new java.awt.Dimension(250, 30));
        comboSubjectCode.setName(""); // NOI18N
        comboSubjectCode.setPreferredSize(new java.awt.Dimension(250, 30));
        comboSubjectCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSubjectCodeActionPerformed(evt);
            }
        });
        panelSubjectCode.add(comboSubjectCode);

        panelInputs.add(panelSubjectCode);

        panelSubjectDescription.setOpaque(false);

        lblSubjectDescription.setText("Subject description");
        lblSubjectDescription.setMaximumSize(new java.awt.Dimension(110, 25));
        lblSubjectDescription.setMinimumSize(new java.awt.Dimension(110, 25));
        lblSubjectDescription.setPreferredSize(new java.awt.Dimension(110, 25));
        panelSubjectDescription.add(lblSubjectDescription);

        comboSubjectDesc.setMaximumSize(new java.awt.Dimension(250, 30));
        comboSubjectDesc.setMinimumSize(new java.awt.Dimension(250, 30));
        comboSubjectDesc.setName(""); // NOI18N
        comboSubjectDesc.setPreferredSize(new java.awt.Dimension(250, 30));
        comboSubjectDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSubjectDescActionPerformed(evt);
            }
        });
        panelSubjectDescription.add(comboSubjectDesc);

        panelInputs.add(panelSubjectDescription);

        panelGrade.setOpaque(false);

        lblGrade.setText("Grade");
        lblGrade.setMaximumSize(new java.awt.Dimension(110, 25));
        lblGrade.setMinimumSize(new java.awt.Dimension(110, 25));
        lblGrade.setPreferredSize(new java.awt.Dimension(110, 25));
        panelGrade.add(lblGrade);

        comboGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.00", "1.25", "1.50", "1.75", "2.00", "2.25", "2.50", "2.75", "3.00", "5.00" }));
        comboGrade.setToolTipText("");
        comboGrade.setMaximumSize(new java.awt.Dimension(185, 30));
        comboGrade.setMinimumSize(new java.awt.Dimension(185, 30));
        comboGrade.setName(""); // NOI18N
        comboGrade.setPreferredSize(new java.awt.Dimension(185, 30));
        panelGrade.add(comboGrade);

        btnSave.setText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(60, 30));
        btnSave.setMinimumSize(new java.awt.Dimension(60, 30));
        btnSave.setPreferredSize(new java.awt.Dimension(60, 30));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panelGrade.add(btnSave);

        panelInputs.add(panelGrade);

        add(panelInputs);

        tableGrades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject code", "Description", "Units", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGrades.getTableHeader().setReorderingAllowed(false);
        scrollGrades.setViewportView(tableGrades);

        add(scrollGrades);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        insertEnrollment();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void comboStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStudentNameActionPerformed
        if (comboStudentName.getSelectedItem() == null) {
            return;
        }

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            Student student = Student.getStudentByName(db, comboStudentName.getSelectedItem().toString());
            int studentId = student.getStudentId();
            txtStudentId.setText(String.valueOf(studentId));
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        PopulateTable.populateGradeTable(tableGrades, comboStudentName);
    }//GEN-LAST:event_comboStudentNameActionPerformed

    private void comboSubjectDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSubjectDescActionPerformed
        if (comboSubjectDesc.getSelectedItem() == null) {
            return;
        }

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            Subject subject = Subject.getSubjectByDesc(db, comboSubjectDesc.getSelectedItem().toString());
            String subjectCode = subject.getSubjectCode();
            comboSubjectCode.setSelectedItem(subjectCode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_comboSubjectDescActionPerformed

    private void comboSubjectCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSubjectCodeActionPerformed
        if (comboSubjectCode.getSelectedItem() == null) {
            return;
        }

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            Subject subject = Subject.getSubjectByCode(db, comboSubjectCode.getSelectedItem().toString());
            String subjectDesc = subject.getDescription();
            comboSubjectDesc.setSelectedItem(subjectDesc);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_comboSubjectCodeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> comboGrade;
    private javax.swing.JComboBox<String> comboStudentName;
    private javax.swing.JComboBox<String> comboSubjectCode;
    private javax.swing.JComboBox<String> comboSubjectDesc;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel lblSubjectCode;
    private javax.swing.JLabel lblSubjectDescription;
    private javax.swing.JPanel panelGrade;
    private javax.swing.JPanel panelInputs;
    private javax.swing.JPanel panelStudentID;
    private javax.swing.JPanel panelStudentName;
    private javax.swing.JPanel panelSubjectCode;
    private javax.swing.JPanel panelSubjectDescription;
    private javax.swing.JScrollPane scrollGrades;
    private javax.swing.JSeparator separator;
    private javax.swing.JTable tableGrades;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables
}
