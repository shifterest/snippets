/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Classes.*;
import Utilities.*;
import com.mongodb.client.*;
import javax.swing.*;
import javax.swing.event.*;
import org.bson.Document;

/**
 *
 * @author Delmoro-Ke
 */
public class SubjectPanel extends JPanel {

    String codeToAdd;
    String descToAdd;
    boolean saveState;
    boolean isAdjusting;

    /**
     * Creates new form EnrollmentPane
     */
    public SubjectPanel() {
        initComponents();
        tableSubjects.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged(e);
            }
        });
        
        PopulateTable.subject(tableSubjects);
        saveState = false;
        isAdjusting = false;
        codeToAdd = null;
        descToAdd = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInputs = new javax.swing.JPanel();
        panelSubjectCode = new javax.swing.JPanel();
        lblSubjectCode = new javax.swing.JLabel();
        txtSubjectCode = new javax.swing.JTextField();
        panelDescription = new javax.swing.JPanel();
        lblDescription = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        panelUnits = new javax.swing.JPanel();
        lblUnits = new javax.swing.JLabel();
        comboUnits = new javax.swing.JComboBox<>();
        btnAddSave = new javax.swing.JButton();
        panelSelected = new javax.swing.JPanel();
        lblStudentName1 = new javax.swing.JLabel();
        btnDeselect = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        scrollSubjects = new javax.swing.JScrollPane();
        tableSubjects = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 204, 204));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        panelInputs.setMaximumSize(new java.awt.Dimension(32767, 120));
        panelInputs.setOpaque(false);
        panelInputs.setPreferredSize(new java.awt.Dimension(100, 120));
        panelInputs.setLayout(new javax.swing.BoxLayout(panelInputs, javax.swing.BoxLayout.Y_AXIS));

        panelSubjectCode.setOpaque(false);

        lblSubjectCode.setText("Subject code");
        lblSubjectCode.setMaximumSize(new java.awt.Dimension(100, 25));
        lblSubjectCode.setMinimumSize(new java.awt.Dimension(100, 25));
        lblSubjectCode.setPreferredSize(new java.awt.Dimension(100, 25));
        panelSubjectCode.add(lblSubjectCode);

        txtSubjectCode.setMaximumSize(new java.awt.Dimension(250, 30));
        txtSubjectCode.setMinimumSize(new java.awt.Dimension(250, 30));
        txtSubjectCode.setPreferredSize(new java.awt.Dimension(250, 30));
        panelSubjectCode.add(txtSubjectCode);

        panelInputs.add(panelSubjectCode);

        panelDescription.setOpaque(false);

        lblDescription.setText("Description");
        lblDescription.setMaximumSize(new java.awt.Dimension(100, 25));
        lblDescription.setMinimumSize(new java.awt.Dimension(100, 25));
        lblDescription.setPreferredSize(new java.awt.Dimension(100, 25));
        panelDescription.add(lblDescription);

        txtDescription.setMaximumSize(new java.awt.Dimension(250, 30));
        txtDescription.setMinimumSize(new java.awt.Dimension(250, 30));
        txtDescription.setPreferredSize(new java.awt.Dimension(250, 30));
        panelDescription.add(txtDescription);

        panelInputs.add(panelDescription);

        panelUnits.setOpaque(false);

        lblUnits.setText("Units");
        lblUnits.setMaximumSize(new java.awt.Dimension(100, 25));
        lblUnits.setMinimumSize(new java.awt.Dimension(100, 25));
        lblUnits.setPreferredSize(new java.awt.Dimension(100, 25));
        panelUnits.add(lblUnits);

        comboUnits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.0", "2.0", "3.0", "4.0", "5.0", "6.0" }));
        comboUnits.setToolTipText("");
        comboUnits.setMaximumSize(new java.awt.Dimension(175, 30));
        comboUnits.setMinimumSize(new java.awt.Dimension(175, 30));
        comboUnits.setName(""); // NOI18N
        comboUnits.setPreferredSize(new java.awt.Dimension(175, 30));
        panelUnits.add(comboUnits);
        comboUnits.getAccessibleContext().setAccessibleName("");

        btnAddSave.setText("Add");
        btnAddSave.setMaximumSize(new java.awt.Dimension(70, 30));
        btnAddSave.setMinimumSize(new java.awt.Dimension(70, 30));
        btnAddSave.setPreferredSize(new java.awt.Dimension(70, 30));
        btnAddSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSaveActionPerformed(evt);
            }
        });
        panelUnits.add(btnAddSave);

        panelInputs.add(panelUnits);

        add(panelInputs);

        panelSelected.setMaximumSize(new java.awt.Dimension(32767, 40));
        panelSelected.setOpaque(false);

        lblStudentName1.setText("Selected subject");
        lblStudentName1.setMaximumSize(new java.awt.Dimension(100, 25));
        lblStudentName1.setMinimumSize(new java.awt.Dimension(100, 25));
        lblStudentName1.setPreferredSize(new java.awt.Dimension(100, 25));
        panelSelected.add(lblStudentName1);

        btnDeselect.setText("Deselect");
        btnDeselect.setEnabled(false);
        btnDeselect.setMaximumSize(new java.awt.Dimension(85, 30));
        btnDeselect.setMinimumSize(new java.awt.Dimension(85, 30));
        btnDeselect.setPreferredSize(new java.awt.Dimension(85, 30));
        btnDeselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectActionPerformed(evt);
            }
        });
        panelSelected.add(btnDeselect);

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.setMaximumSize(new java.awt.Dimension(85, 30));
        btnUpdate.setMinimumSize(new java.awt.Dimension(85, 30));
        btnUpdate.setPreferredSize(new java.awt.Dimension(85, 30));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        panelSelected.add(btnUpdate);

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.setMaximumSize(new java.awt.Dimension(70, 30));
        btnDelete.setMinimumSize(new java.awt.Dimension(70, 30));
        btnDelete.setPreferredSize(new java.awt.Dimension(70, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panelSelected.add(btnDelete);

        add(panelSelected);

        tableSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject code", "Description", "Units"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSubjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableSubjects.getTableHeader().setReorderingAllowed(false);
        tableSubjects.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableSubjectsKeyPressed(evt);
            }
        });
        scrollSubjects.setViewportView(tableSubjects);
        if (tableSubjects.getColumnModel().getColumnCount() > 0) {
            tableSubjects.getColumnModel().getColumn(0).setMinWidth(0);
            tableSubjects.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableSubjects.getColumnModel().getColumn(2).setMinWidth(0);
            tableSubjects.getColumnModel().getColumn(2).setPreferredWidth(0);
        }

        add(scrollSubjects);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSaveActionPerformed
        if (saveState) {
            if (txtSubjectCode.getText().isBlank() || txtDescription.getText().isBlank()) {
                JOptionPane.showMessageDialog(null, "Enter a valid subject code and description!", "Input error", JOptionPane.ERROR_MESSAGE);
            } else {
                try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
                    MongoDatabase db = client.getDatabase("Enrollment");
                    MongoCollection<Document> collection = db.getCollection("Subject");

                    Subject s =  new Subject(
                        codeToAdd,
                        descToAdd,
                        Double.parseDouble(comboUnits.getSelectedItem().toString())
                    );
                    if (Subject.getSubjectByCode(db, s.getSubjectCode()) != null) {
                        JOptionPane.showMessageDialog(null, "A subject with this code already exists!", "Duplicate entry", JOptionPane.ERROR_MESSAGE);
                        txtSubjectCode.requestFocus();
                    } else {
                        s.addSubject(db);
                        txtSubjectCode.setText("");
                        txtDescription.setText("");
                        PopulateTable.subject(tableSubjects);
                        JOptionPane.showMessageDialog(null, "Subject added!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            codeToAdd = null;
            descToAdd = null;
            saveState = false;
            setSaveState();
        } else {
            codeToAdd = txtSubjectCode.getText().trim();
            descToAdd = txtDescription.getText().trim();
            saveState = true;
            setSaveState();
        }
    }//GEN-LAST:event_btnAddSaveActionPerformed

    private void btnDeselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectActionPerformed
        tableSubjects.clearSelection();
    }//GEN-LAST:event_btnDeselectActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            MongoCollection<Document> collection = db.getCollection("Subject");
            String code = tableSubjects.getValueAt(tableSubjects.getSelectedRow(), 0).toString();
            Subject s = Subject.getSubjectByCode(db, code);

            if (s.hasEnrollments(db)) {
                JOptionPane.showMessageDialog(null, "Remove this subjects's enrollments before deleting it!", "Enrollments exist", JOptionPane.ERROR_MESSAGE);
                return;
            }

            s.deleteSubject(db);
            PopulateTable.subject(tableSubjects);
            JOptionPane.showMessageDialog(null, "Subject deleted!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (txtSubjectCode.getText().isBlank() || txtDescription.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter a valid subject code and description!", "Input error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("Enrollment");

            MongoCollection<Document> collection = db.getCollection("Subject");
            String oldCode = tableSubjects.getValueAt(tableSubjects.getSelectedRow(), 0).toString();
            Subject oldS = Subject.getSubjectByCode(db, oldCode);
            Subject newS = new Subject(
                txtSubjectCode.getText().trim(),
                txtDescription.getText().trim(),
                Double.parseDouble(comboUnits.getSelectedItem().toString())
            );
            
            if (!oldCode.equals(newS.getSubjectCode()) && oldS.hasEnrollments(db)) {
                JOptionPane.showMessageDialog(null, "Remove this subject's enrollments before updating it!", "Enrollments exist", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Subject.getSubjectByCode(db, newS.getSubjectCode()) != null && !Subject.getSubjectByCode(db, newS.getSubjectCode()).equals(oldS)) {
                JOptionPane.showMessageDialog(null, "A subject with this code already exists!", "Duplicate entry", JOptionPane.ERROR_MESSAGE);
                txtSubjectCode.requestFocus();
                return;
            }

            oldS.deleteSubject(db);
            newS.addSubject(db);
            PopulateTable.subject(tableSubjects);
            JOptionPane.showMessageDialog(null, "Subject updated!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tableSubjectsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSubjectsKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            btnDeleteActionPerformed(null);
        }
    }//GEN-LAST:event_tableSubjectsKeyPressed

    private void tableSelectionChanged(ListSelectionEvent evt) {
        if (isAdjusting || evt.getValueIsAdjusting()) {
            return;
        }

        isAdjusting = true;

        if (tableSubjects.getSelectedRow() >= 0) {
            int row = tableSubjects.getSelectedRow();
            btnDeselect.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            btnAddSave.setEnabled(false);
            txtSubjectCode.setEnabled(false);
            txtDescription.setEnabled(true);
            comboUnits.setEnabled(true);
            saveState = false;

            txtSubjectCode.setText(tableSubjects.getValueAt(row, 0).toString());
            txtDescription.setText(tableSubjects.getValueAt(row, 1).toString());
            comboUnits.setSelectedItem(tableSubjects.getValueAt(row, 2).toString());

            tableSubjects.setRowSelectionInterval(row, row);
        } else {
            btnDeselect.setEnabled(false);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
            btnAddSave.setEnabled(true);
            setSaveState();

            txtSubjectCode.setText("");
            txtDescription.setText("");
        }

        isAdjusting = false;
    }
    
    private void setSaveState() {
        if (saveState) {
            txtSubjectCode.setEnabled(false);
            txtDescription.setEnabled(false);
            comboUnits.setEnabled(false);
            btnAddSave.setText("Save");
        } else {
            txtSubjectCode.setEnabled(true);
            txtDescription.setEnabled(true);
            comboUnits.setEnabled(true);
            btnAddSave.setText("Add");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSave;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeselect;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboUnits;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblStudentName1;
    private javax.swing.JLabel lblSubjectCode;
    private javax.swing.JLabel lblUnits;
    private javax.swing.JPanel panelDescription;
    private javax.swing.JPanel panelInputs;
    private javax.swing.JPanel panelSelected;
    private javax.swing.JPanel panelSubjectCode;
    private javax.swing.JPanel panelUnits;
    private javax.swing.JScrollPane scrollSubjects;
    private javax.swing.JTable tableSubjects;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtSubjectCode;
    // End of variables declaration//GEN-END:variables
}
